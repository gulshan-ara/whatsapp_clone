{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaProvider, SafeAreaView } from \"react-native-safe-area-context\";\nimport { registerRootComponent } from \"expo\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport * as Font from \"expo-font\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nSplashScreen.preventAutoHideAsync();\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsLoaded = _useState2[0],\n    setAppIsLoaded = _useState2[1];\n  useEffect(function () {\n    var prepare = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          yield Font.loadAsync({\n            \"black\": require(\"./assets/fonts/Roboto-Black.ttf\")\n          });\n        } catch (error) {\n          console.log.error();\n        } finally {\n          setAppIsLoaded(true);\n        }\n      });\n      return function prepare() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    prepare();\n  }, []);\n  var onLayout = useCallback(_asyncToGenerator(function* () {\n    if (appIsLoaded) {\n      yield SplashScreen.hideAsync();\n    }\n  }), [appIsLoaded]);\n  if (!appIsLoaded) {\n    return null;\n  }\n  return _jsx(SafeAreaProvider, {\n    style: styles.container,\n    onLayout: onLayout,\n    children: _jsx(SafeAreaView, {\n      children: _jsx(Text, {\n        style: styles.label,\n        children: \"Hello!!\"\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  label: {\n    fontFamily: \"black\",\n    fontSize: 18,\n    color: \"black\"\n  }\n});\nregisterRootComponent(App);","map":{"version":3,"names":["StatusBar","StyleSheet","Text","View","SafeAreaProvider","SafeAreaView","registerRootComponent","SplashScreen","useCallback","useState","useEffect","Font","jsx","_jsx","preventAutoHideAsync","App","_useState","_useState2","_slicedToArray","appIsLoaded","setAppIsLoaded","prepare","_ref","_asyncToGenerator","loadAsync","require","error","console","log","apply","arguments","onLayout","hideAsync","style","styles","container","children","label","create","flex","backgroundColor","alignItems","justifyContent","fontFamily","fontSize","color"],"sources":["/Users/gulshan/Documents/React_native_dev/whatsapp_clone/App.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { SafeAreaProvider, SafeAreaView } from \"react-native-safe-area-context\";\nimport { registerRootComponent } from \"expo\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport * as Font from \"expo-font\";\n\n// Keep the splash screen visible while we fetch resources\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsLoaded, setAppIsLoaded] = useState(false);\n\n  useEffect(() => {\n    const prepare = async () => {\n      try {\n        await Font.loadAsync({\n          \"black\" : require(\"./assets/fonts/Roboto-Black.ttf\")\n        });\n      } catch (error) {\n        console.log.error();\n      } finally {\n        setAppIsLoaded(true);\n      }\n    };\n\n    prepare();\n  }, []);\n\n  const onLayout = useCallback(async () => {\n    if (appIsLoaded) {\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsLoaded]);\n\n  if (!appIsLoaded) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider style={styles.container} onLayout={onLayout}>\n      <SafeAreaView>\n        <Text style={styles.label}>Hello!!</Text>\n      </SafeAreaView>\n    </SafeAreaProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  label : {\n    fontFamily: \"black\",\n    fontSize: 18, \n    color: \"black\"\n  }\n});\n\nregisterRootComponent(App);\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAE5C,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,gCAAgC;AAC/E,SAASC,qBAAqB,QAAQ,MAAM;AAC5C,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAClD,SAASC,WAAW,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACxD,OAAO,KAAKC,IAAI,MAAM,WAAW;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAGlCN,YAAY,CAACO,oBAAoB,CAAC,CAAC;AAEnC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAsCP,QAAQ,CAAC,KAAK,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAElCP,SAAS,CAAC,YAAM;IACd,IAAMW,OAAO;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAC1B,IAAI;UACF,MAAMZ,IAAI,CAACa,SAAS,CAAC;YACnB,OAAO,EAAGC,OAAO,kCAAkC;UACrD,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;QACrB,CAAC,SAAS;UACRN,cAAc,CAAC,IAAI,CAAC;QACtB;MACF,CAAC;MAAA,gBAVKC,OAAOA,CAAA;QAAA,OAAAC,IAAA,CAAAO,KAAA,OAAAC,SAAA;MAAA;IAAA,GAUZ;IAEDT,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMU,QAAQ,GAAGvB,WAAW,CAAAe,iBAAA,CAAC,aAAY;IACvC,IAAIJ,WAAW,EAAE;MACf,MAAMZ,YAAY,CAACyB,SAAS,CAAC,CAAC;IAChC;EACF,CAAC,GAAE,CAACb,WAAW,CAAC,CAAC;EAEjB,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EAEA,OACEN,IAAA,CAACT,gBAAgB;IAAC6B,KAAK,EAAEC,MAAM,CAACC,SAAU;IAACJ,QAAQ,EAAEA,QAAS;IAAAK,QAAA,EAC5DvB,IAAA,CAACR,YAAY;MAAA+B,QAAA,EACXvB,IAAA,CAACX,IAAI;QAAC+B,KAAK,EAAEC,MAAM,CAACG,KAAM;QAAAD,QAAA,EAAC;MAAO,CAAM;IAAC,CAC7B;EAAC,CACC,CAAC;AAEvB;AAEA,IAAMF,MAAM,GAAGjC,UAAU,CAACqC,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDL,KAAK,EAAG;IACNM,UAAU,EAAE,OAAO;IACnBC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE;EACT;AACF,CAAC,CAAC;AAEFvC,qBAAqB,CAACS,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}