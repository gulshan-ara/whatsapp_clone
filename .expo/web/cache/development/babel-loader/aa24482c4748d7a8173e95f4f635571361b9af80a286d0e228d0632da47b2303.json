{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { validate } from \"validate.js\";\nexport var validateString = function validateString(id, value) {\n  var constraints = {\n    presence: {\n      allowEmpty: false\n    }\n  };\n  if (value !== \"\") {\n    constraints.format = {\n      pattern: \"[a-z]*\",\n      flags: \"i\",\n      message: \"Value can only contains letters\"\n    };\n  }\n  var validationRes = validate(_defineProperty({}, id, value), _defineProperty({}, id, constraints));\n  return validationRes && validationRes[id];\n};\nexport var validateEmail = function validateEmail(id, value) {\n  var constraints = {\n    presence: {\n      allowEmpty: false\n    }\n  };\n  if (value !== \"\") {\n    constraints.email = true;\n  }\n  var validationRes = validate(_defineProperty({}, id, value), _defineProperty({}, id, constraints));\n  return validationRes && validationRes[id];\n};\nexport var validatePassword = function validatePassword(id, value) {\n  var constraints = {\n    presence: {\n      allowEmpty: false\n    }\n  };\n  if (value !== \"\") {\n    constraints.length = {\n      minimum: 6,\n      message: \"must be at least 6 characters\"\n    };\n  }\n  var validationRes = validate(_defineProperty({}, id, value), _defineProperty({}, id, constraints));\n  return validationRes && validationRes[id];\n};\nexport var validateLength = function validateLength(id, value, minLength, maxLength, allowEmpty) {\n  var constraints = {\n    presence: {\n      allowEmpty: allowEmpty\n    }\n  };\n  if (!allowEmpty || value !== \"\") {\n    constraints.length = {};\n    if (minLength !== null) {\n      constraints.length.minimum = minLength;\n    }\n    if (maxLength !== null) {\n      constraints.length.maximum = maxLength;\n    }\n  }\n  var validationRes = validate(_defineProperty({}, id, value), _defineProperty({}, id, constraints));\n  return validationRes && validationRes[id];\n};","map":{"version":3,"names":["validate","validateString","id","value","constraints","presence","allowEmpty","format","pattern","flags","message","validationRes","_defineProperty","validateEmail","email","validatePassword","length","minimum","validateLength","minLength","maxLength","maximum"],"sources":["/Users/gulshan/Documents/React_native_dev/whatsapp_clone/utils/validationConstraints.js"],"sourcesContent":["import { validate } from \"validate.js\";\n\n// validation of strings using validate.js\nexport const validateString = (id, value) => {\n\tconst constraints = {\n\t\tpresence: { allowEmpty: false },\n\t};\n\n\tif (value !== \"\") {\n\t\tconstraints.format = {\n\t\t\tpattern: \"[a-z]*\",\n\t\t\tflags: \"i\",\n\t\t\tmessage: \"Value can only contains letters\",\n\t\t};\n\t}\n\n\tconst validationRes = validate({ [id]: value }, { [id]: constraints });\n\n\treturn validationRes && validationRes[id];\n};\n\nexport const validateEmail = (id, value) => {\n\tconst constraints = {\n\t\tpresence: { allowEmpty: false },\n\t};\n\n\tif (value !== \"\") {\n\t\tconstraints.email = true;\n\t}\n\n\tconst validationRes = validate({ [id]: value }, { [id]: constraints });\n\n\treturn validationRes && validationRes[id];\n};\n\nexport const validatePassword = (id, value) => {\n\tconst constraints = {\n\t\tpresence: { allowEmpty: false },\n\t};\n\n\tif (value !== \"\") {\n\t\tconstraints.length = {\n\t\t\tminimum: 6,\n\t\t\tmessage: \"must be at least 6 characters\",\n\t\t};\n\t}\n\n\tconst validationRes = validate({ [id]: value }, { [id]: constraints });\n\n\treturn validationRes && validationRes[id];\n};\n\nexport const validateLength = (id, value, minLength, maxLength, allowEmpty) => {\n\tconst constraints = {\n\t\tpresence: { allowEmpty: allowEmpty },\n\t};\n\n\tif (!allowEmpty || value !== \"\") {\n\t\tconstraints.length = {};\n\n\t\tif (minLength !== null) {\n\t\t\tconstraints.length.minimum = minLength;\n\t\t}\n\n\t\tif (maxLength !== null) {\n\t\t\tconstraints.length.maximum = maxLength;\n\t\t}\n\t}\n\n\tconst validationRes = validate({ [id]: value }, { [id]: constraints });\n\n\treturn validationRes && validationRes[id];\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,EAAE,EAAEC,KAAK,EAAK;EAC5C,IAAMC,WAAW,GAAG;IACnBC,QAAQ,EAAE;MAAEC,UAAU,EAAE;IAAM;EAC/B,CAAC;EAED,IAAIH,KAAK,KAAK,EAAE,EAAE;IACjBC,WAAW,CAACG,MAAM,GAAG;MACpBC,OAAO,EAAE,QAAQ;MACjBC,KAAK,EAAE,GAAG;MACVC,OAAO,EAAE;IACV,CAAC;EACF;EAEA,IAAMC,aAAa,GAAGX,QAAQ,CAAAY,eAAA,KAAIV,EAAE,EAAGC,KAAK,GAAAS,eAAA,KAAOV,EAAE,EAAGE,WAAW,CAAE,CAAC;EAEtE,OAAOO,aAAa,IAAIA,aAAa,CAACT,EAAE,CAAC;AAC1C,CAAC;AAED,OAAO,IAAMW,aAAa,GAAG,SAAhBA,aAAaA,CAAIX,EAAE,EAAEC,KAAK,EAAK;EAC3C,IAAMC,WAAW,GAAG;IACnBC,QAAQ,EAAE;MAAEC,UAAU,EAAE;IAAM;EAC/B,CAAC;EAED,IAAIH,KAAK,KAAK,EAAE,EAAE;IACjBC,WAAW,CAACU,KAAK,GAAG,IAAI;EACzB;EAEA,IAAMH,aAAa,GAAGX,QAAQ,CAAAY,eAAA,KAAIV,EAAE,EAAGC,KAAK,GAAAS,eAAA,KAAOV,EAAE,EAAGE,WAAW,CAAE,CAAC;EAEtE,OAAOO,aAAa,IAAIA,aAAa,CAACT,EAAE,CAAC;AAC1C,CAAC;AAED,OAAO,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIb,EAAE,EAAEC,KAAK,EAAK;EAC9C,IAAMC,WAAW,GAAG;IACnBC,QAAQ,EAAE;MAAEC,UAAU,EAAE;IAAM;EAC/B,CAAC;EAED,IAAIH,KAAK,KAAK,EAAE,EAAE;IACjBC,WAAW,CAACY,MAAM,GAAG;MACpBC,OAAO,EAAE,CAAC;MACVP,OAAO,EAAE;IACV,CAAC;EACF;EAEA,IAAMC,aAAa,GAAGX,QAAQ,CAAAY,eAAA,KAAIV,EAAE,EAAGC,KAAK,GAAAS,eAAA,KAAOV,EAAE,EAAGE,WAAW,CAAE,CAAC;EAEtE,OAAOO,aAAa,IAAIA,aAAa,CAACT,EAAE,CAAC;AAC1C,CAAC;AAED,OAAO,IAAMgB,cAAc,GAAG,SAAjBA,cAAcA,CAAIhB,EAAE,EAAEC,KAAK,EAAEgB,SAAS,EAAEC,SAAS,EAAEd,UAAU,EAAK;EAC9E,IAAMF,WAAW,GAAG;IACnBC,QAAQ,EAAE;MAAEC,UAAU,EAAEA;IAAW;EACpC,CAAC;EAED,IAAI,CAACA,UAAU,IAAIH,KAAK,KAAK,EAAE,EAAE;IAChCC,WAAW,CAACY,MAAM,GAAG,CAAC,CAAC;IAEvB,IAAIG,SAAS,KAAK,IAAI,EAAE;MACvBf,WAAW,CAACY,MAAM,CAACC,OAAO,GAAGE,SAAS;IACvC;IAEA,IAAIC,SAAS,KAAK,IAAI,EAAE;MACvBhB,WAAW,CAACY,MAAM,CAACK,OAAO,GAAGD,SAAS;IACvC;EACD;EAEA,IAAMT,aAAa,GAAGX,QAAQ,CAAAY,eAAA,KAAIV,EAAE,EAAGC,KAAK,GAAAS,eAAA,KAAOV,EAAE,EAAGE,WAAW,CAAE,CAAC;EAEtE,OAAOO,aAAa,IAAIA,aAAa,CAACT,EAAE,CAAC;AAC1C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}