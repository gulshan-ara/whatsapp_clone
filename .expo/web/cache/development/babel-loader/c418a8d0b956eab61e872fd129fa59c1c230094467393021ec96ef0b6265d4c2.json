{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"borderless\", \"pressColor\", \"rippleRadius\", \"style\", \"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nvar CAN_USE_RIPLLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\nexport default function TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    _ref$pressColor = _ref.pressColor,\n    pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n    rippleRadius = _ref.rippleRadius,\n    style = _ref.style,\n    children = _ref.children,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var background = React.useMemo(function () {\n    return CAN_USE_RIPLLE ? TouchableNativeFeedback.Ripple(pressColor, borderless, rippleRadius) : undefined;\n  }, [pressColor, borderless, rippleRadius]);\n  if (CAN_USE_RIPLLE) {\n    return _jsx(TouchableNativeFeedback, _objectSpread(_objectSpread({}, rest), {}, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: background,\n      children: _jsx(View, {\n        style: style,\n        children: React.Children.only(children)\n      })\n    }));\n  } else {\n    return _jsx(TouchableOpacity, _objectSpread(_objectSpread({\n      style: style\n    }, rest), {}, {\n      children: children\n    }));\n  }\n}","map":{"version":3,"names":["React","Platform","TouchableNativeFeedback","TouchableOpacity","View","jsx","_jsx","ANDROID_VERSION_LOLLIPOP","CAN_USE_RIPLLE","OS","Version","TouchableItem","_ref","_ref$borderless","borderless","_ref$pressColor","pressColor","rippleRadius","style","children","rest","_objectWithoutProperties","_excluded","background","useMemo","Ripple","undefined","_objectSpread","useForeground","canUseNativeForeground","Children","only"],"sources":["/Users/gulshan/Documents/React_native_dev/whatsapp_clone/node_modules/react-navigation-header-buttons/src/TouchableItem.js"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  type ViewProps,\n} from 'react-native';\n\ntype Props = {\n  ...ViewProps,\n  pressColor?: string,\n  disabled?: boolean,\n  borderless?: boolean,\n  delayPressIn?: number,\n  onPress?: () => void,\n  children: React.Node,\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst CAN_USE_RIPLLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  rippleRadius,\n  style,\n  children,\n  ...rest\n}: Props) {\n  const background = React.useMemo(() => {\n    return CAN_USE_RIPLLE\n      ? TouchableNativeFeedback.Ripple(pressColor, borderless, rippleRadius)\n      : undefined;\n  }, [pressColor, borderless, rippleRadius]);\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (CAN_USE_RIPLLE) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={background}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,uBAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAmB/B,IAAMC,wBAAwB,GAAG,EAAE;AACnC,IAAMC,cAAc,GAAGP,QAAQ,CAACQ,EAAE,KAAK,SAAS,IAAIR,QAAQ,CAACS,OAAO,IAAIH,wBAAwB;AAEhG,eAAe,SAASI,aAAaA,CAAAC,IAAA,EAO3B;EAAA,IAAAC,eAAA,GAAAD,IAAA,CANRE,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA;IAAAE,eAAA,GAAAH,IAAA,CAClBI,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,oBAAoB,GAAAA,eAAA;IACjCE,YAAY,GAAAL,IAAA,CAAZK,YAAY;IACZC,KAAK,GAAAN,IAAA,CAALM,KAAK;IACLC,QAAQ,GAAAP,IAAA,CAARO,QAAQ;IACLC,IAAI,GAAAC,wBAAA,CAAAT,IAAA,EAAAU,SAAA;EAEP,IAAMC,UAAU,GAAGvB,KAAK,CAACwB,OAAO,CAAC,YAAM;IACrC,OAAOhB,cAAc,GACjBN,uBAAuB,CAACuB,MAAM,CAACT,UAAU,EAAEF,UAAU,EAAEG,YAAY,CAAC,GACpES,SAAS;EACf,CAAC,EAAE,CAACV,UAAU,EAAEF,UAAU,EAAEG,YAAY,CAAC,CAAC;EAS1C,IAAIT,cAAc,EAAE;IAClB,OACEF,IAAA,CAACJ,uBAAuB,EAAAyB,aAAA,CAAAA,aAAA,KAClBP,IAAI;MACRQ,aAAa,EAAE1B,uBAAuB,CAAC2B,sBAAsB,CAAC,CAAE;MAChEN,UAAU,EAAEA,UAAW;MAAAJ,QAAA,EAEvBb,IAAA,CAACF,IAAI;QAACc,KAAK,EAAEA,KAAM;QAAAC,QAAA,EAAEnB,KAAK,CAAC8B,QAAQ,CAACC,IAAI,CAACZ,QAAQ;MAAC,CAAO;IAAC,EACnC,CAAC;EAE9B,CAAC,MAAM;IACL,OACEb,IAAA,CAACH,gBAAgB,EAAAwB,aAAA,CAAAA,aAAA;MAACT,KAAK,EAAEA;IAAM,GAAKE,IAAI;MAAAD,QAAA,EACrCA;IAAQ,EACO,CAAC;EAEvB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}